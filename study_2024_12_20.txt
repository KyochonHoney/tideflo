객체 지향  ( OOP ) - 클래스화 시키기 ( 복잡한 것 상속받아서 한번에 정리할 수 있음)
object priented Programming
 <-> 절차적 프로그래밍 ( C언어 )

추상화(abstract) - 추상적으로 하는 것 예를 들어서 우리가 라이브러리를 사용할 때, 해당 로직이 어떻게 돌아가는지, 코드는 모르지만 어떤 func을 사용했을 때 원하는 값을 받는다. 
ex ) 우리는 로직을 구현하는 게 아니라 이미 되어있는 로직을 사용하는 것이다.
ex ) strtolower($word) ==> if로 대문자인지 소문자인지 확인 후 소문자일 경우 각 char를 소문자로 각 숫자만큼 빼고 소문자로 만드는 로직일 것이지만 우리는 단지 strtolower 함수만을 사용한다.

다형성(polymorphism) - 같은 타입끼리를 묶어서 하나의 자료형을 만드는 것 --> DTO를 만드는 개념 정도라 생각 OR overloading overriding

 캡슐화 ( Encapsulation )
protected, default, private 등을 사용하여 내부를 볼 수 없게 만들며, 각각의 값들은 다 가져오는 것이다 --> 마치 캡슐처럼 안에 있는 성분을 모르지만 먹었을 때 우리가 건강해지는 것처럼.

정보 은닉 
1. 객체의 구체적인 타입 은닉 ( = 업캐스팅)
2. 객체의 필드 및 메소드 은닉 ( = 캡슐화)
3. 구현 은닉 ( = 인터페이스 & 추상 클래스)
출처: https://inpa.tistory.com/entry/OOP-캡슐화Encapsulation-정보-은닉의-완벽-이해 [Inpa Dev 👨‍💻:티스토리]



